'''
iOS最实用的13种设计模式
'''

# 1、单例 模式
# 2、MVC
# 3、MVVM
# 4、观察者
# 5、代理
# 6、工厂
# 7、适配器
    # 适配器模式将一个类的接口适配成用户所期待的
    # 使用场景：
    # 当你想使用一个已经存在的类，而它的接口不符合你的需求；
    # 你想创建一个可以复用的类，该类可以与其他不相关的类或不可预见的类协同工作；
    # 你想使用一些已经存在的子类，但是不可能对每一个都进行子类化以匹配它们的接口，对象适配器可以适配它的父亲接口

    # 优点：降低数据层和视图层（对象）的耦合度，使之使用更加广泛；适应复杂多变的变化
    # 缺点：可读性差；代码量增加
# 踩坑：
# @property时，处理这么多就会报错，.m中不可以同时重写setter和getter。若同时重写，系统不会帮你自动生成这个成员变量！
# 只能实现1个setter和getter方法； 系统会生成自动变量。
# 使用@synthesize name = _name;  可以同时重写setter和getter。系统会自动生成变量。
# 使用@dynamic name; 可以同时重写setter和getter方法。系统也没自动生成变量：可使用objc——runtime绑定方法



# 8、策略

# 9、原型/外观
# 10、装饰
# 11、桥接
# 12、备忘录
# 13、生成器
# 14、命令
